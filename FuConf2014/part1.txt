⍝ Introducing APL 
⍝ "⍝" is the "lamp" symbol; comments provide illumination
⍝ --- APL is Interactive ---
2 + 2
1 2 3 + 4 5 6     ⍝ "map" is implicit
1 2 3 × 10 100 1000
! 1 2 3 4 5 6     ⍝ Factorial
names ← 'Dory' 'Deb' 'Gill' 'Nemo' 'Bruce' 'Gurgle'
(⊂'Nemo')∊names
names∊⊂'Nemo'
names⍳⊂'Nemo' 
list←1 2 3 4 5 6
list × 2 ⍝ double :-)
⍝ --- APL has NO Precedence Hierarchy ---
-  10 ÷  7 - 2    ⍝ Syntax model is "f g x" ←→ f(g(x)) as in math
- (10 ÷ (7 - 2))
- (10 ÷ 5)
- 2
⍝ Most functions have a prefix and an infix definition (see Lang.Bar)
⍝ Generally: Read from left to right, (then) execute from right to left
⍝ --- Functions and Operators ---
+/ 1 2 3 4        ⍝ "plus reduce" 
×/ 1 2 3 4        ⍝ "times reduce"
+\ 1 2 3 4        ⍝ "plus scan"
1 2 3 +.× 10 5 10 ⍝ ←→ ×/ 1 2 3 × 10 5 10 
'ABC' ∨.= 'APE'   ⍝ ←→ ∨/ 'ABC' = 'APE'
'ABC' = 'APE'
⍝ Note: Monadic OPERATORS are POSTFIX - function is on the left
⍝ --- User-defined and Primitive Functions are treated identically ---
Sqrt←{⍵*0.5}                ⍝ User-defined prefix function
Sqrt 1 2 3 4
Pythagoras ← {Sqrt ⍺ ⍵ +.* 2} ⍝ User-defined infix function
3 8 1 Pythagoras 4 6 1
3 8 1 +.Pythagoras 4 6 1 ⍝ "map-reduce" (since 1966)
⍝ --- All Primitives are Array Oriented ---
? 6 6 6 6 ⍝ Roll four dice
10 ⍴ 6    ⍝ 10 Reshape 6
? 10 ⍴ 6  ⍝ Roll 10 6-sided dice
⍝ --- Too many squiggles? Don't Panic ---
Reshape ← ⍴ ⍝ Function expressions can be also named
Roll ← ?
Roll 10 Reshape 6
throws ← Roll 10 Reshape 6 
throws
throws = 5
Sum ← +/       ⍝ Plus Reduce
Sum throws = 5 ⍝ Results of logical functions are "1-bit integers"
1 2 3 4 5 6 ∘.= throws ⍝ Outer Product with Equals
Count ← ⍳
Count 6
Sum (Count 6) ∘.= throws
Sum (Count 6) ∘.= Roll 1E6 Reshape 6
{⍺,≢⍵}⌸?1E6⍴6
⍝]demo d:\demos\fc2014\part2.txt
symbols←'IBM' 'GOOG' 'AAPL' 'GPRO'
⎕←prices←400+?4⍴200
lt500←(prices≤500)/⍳≢prices
prices[lt500]
{⍵⍳⌈/⍵}prices[lt500] ⍝ index in lt500 of highest price
ix←lt500[{⍵⍳⌈/⍵}prices[lt500]] ⍝ index in symbols and price
ix⊃¨symbols prices
]demo d:\demos\fc2014\part2.txt