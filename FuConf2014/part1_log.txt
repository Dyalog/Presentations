Pragmatic Functional Programming with Dyalog @FuConf

Demo #1

      ⍝ Introducing APL 
      ⍝ "⍝" is the "lamp" symbol; comments provide illumination
      ⍝ Note: User input is indented 6 spaces
      ⍝ Responses aligned with left margin
      ⍝ --- APL is Interactive ---
      2 + 2
4
      1 2 3 + 4 5 6     ⍝ "map" is implicit
5 7 9
      1 2 3 × 10 100 1000
10 200 3000
      ! 1 2 3 4 5 6     ⍝ Factorial
1 2 6 24 120 720
      names ← 'Dory' 'Deb' 'Gill' 'Nemo' 'Bruce' 'Gurgle'
      (⊂'Nemo')∊names
1
      names∊⊂'Nemo'
0 0 0 1 0 0
      names⍳⊂'Nemo' 
4
      list←1 2 3 4 5 6
      list × 2 ⍝ double :-)
2 4 6 8 10 12
      ⍝ --- APL has NO Precedence Hierarchy ---
      -  10 ÷  7 - 2    ⍝ Syntax model is "f g x" ←→ f(g(x)) as in math
¯2
      - (10 ÷ (7 - 2))
¯2
      - (10 ÷ 5)
¯2
      - 2
¯2
      ⍝ Most functions have a prefix and an infix definition (see Lang.Bar)
      ⍝ Generally: Read from left to right, (then) execute from right to left
      ⍝ --- Functions and Operators ---
      +/ 1 2 3 4        ⍝ "plus reduce" 
10
      ×/ 1 2 3 4        ⍝ "times reduce"
24
      +\ 1 2 3 4        ⍝ "plus scan"
1 3 6 10
      1 2 3 +.× 10 5 10 ⍝ ←→ ×/ 1 2 3 × 10 5 10 
50
      'ABC' ∨.= 'APE'   ⍝ ←→ ∨/ 'ABC' = 'APE'
1
      'ABC' = 'APE'
1 0 0
      ⍝ Note: Monadic OPERATORS are POSTFIX - function is on the left
      ⍝ --- User-defined and Primitive Functions are treated identically ---
      Sqrt←{⍵*0.5}                ⍝ User-defined prefix function
      Sqrt 1 2 3 4
1 1.414213562 1.732050808 2
      Pythagoras ← {Sqrt ⍺ ⍵ +.* 2} ⍝ User-defined infix function
      3 8 1 Pythagoras 4 6 1
 5 10 1.414213562 
      3 8 1 +.Pythagoras 4 6 1 ⍝ "map-reduce" (since 1966)
16.41421356
      ⍝ --- All Primitives are Array Oriented ---
      ? 6 6 6 6 ⍝ Roll four dice
4 3 4 2
      10 ⍴ 6    ⍝ 10 Reshape 6
6 6 6 6 6 6 6 6 6 6
      ? 10 ⍴ 6  ⍝ Roll 10 6-sided dice
1 4 5 3 2 2 2 2 5 1
      ⍝ --- Too many squiggles? Don't Panic ---
      Reshape ← ⍴ ⍝ Function expressions can be also named
      Roll ← ?
      Roll 10 Reshape 6
2 4 2 2 6 3 2 2 4 1
      throws ← Roll 10 Reshape 6 
      throws
6 2 1 6 2 2 1 1 2 1
      throws = 5
0 0 0 0 0 0 0 0 0 0
      Sum ← +/       ⍝ Plus Reduce
      Sum throws = 5 ⍝ Results of logical functions are "1-bit integers"
0
      1 2 3 4 5 6 ∘.= throws ⍝ Outer Product with Equals
0 0 1 0 0 0 1 1 0 1
0 1 0 0 1 1 0 0 1 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
1 0 0 1 0 0 0 0 0 0
      Count ← ⍳
      Count 6
1 2 3 4 5 6
      Sum (Count 6) ∘.= throws
4 4 0 0 0 2
      Sum (Count 6) ∘.= Roll 1E6 Reshape 6
166912 166176 166428 166967 166543 166974
      {⍺,≢⍵}⌸?1E6⍴6
3 166928
4 166545
6 167015
2 166815
5 166948
1 165749
      symbols←'IBM' 'GOOG' 'AAPL' 'GPRO'
      ⎕←prices←400+?4⍴200
582 466 511 507
      lt500←(prices≤500)/⍳≢prices
      prices[lt500]
466
      {⍵⍳⌈/⍵}prices[lt500] ⍝ index in lt500 of highest price
1
      ix←lt500[{⍵⍳⌈/⍵}prices[lt500]] ⍝ index in symbols and price
      ix⊃¨symbols prices
 GOOG  466
